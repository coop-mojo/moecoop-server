// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/coop-mojo/moecoop-server/moecoop"
	"github.com/coop-mojo/moecoop-server/restapi/operations"
	"github.com/coop-mojo/moecoop-server/restapi/operations/その他"
	"github.com/coop-mojo/moecoop-server/restapi/operations/アイテム"
	"github.com/coop-mojo/moecoop-server/restapi/operations/メニューレシピ"
	"github.com/coop-mojo/moecoop-server/restapi/operations/レシピ"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name fukurod --spec ../common/api/swagger.yml

func configureFlags(api *operations.FukurodAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.FukurodAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.XレシピGetBindersHandler = レシピ.GetBindersHandlerFunc(func(params レシピ.GetBindersParams) middleware.Responder {
		return middleware.NotImplemented("operation レシピ.GetBinders has not yet been implemented")
	})
	api.XレシピGetBindersBinderRecipesHandler = レシピ.GetBindersBinderRecipesHandlerFunc(func(params レシピ.GetBindersBinderRecipesParams) middleware.Responder {
		return middleware.NotImplemented("operation レシピ.GetBindersBinderRecipes has not yet been implemented")
	})
	api.Xその他GetInformationHandler = その他.GetInformationHandlerFunc(func(params その他.GetInformationParams) middleware.Responder {
		return middleware.NotImplemented("operation その他.GetInformation has not yet been implemented")
	})
	api.XアイテムGetItemsHandler = アイテム.GetItemsHandlerFunc(func(params アイテム.GetItemsParams) middleware.Responder {
		return middleware.NotImplemented("operation アイテム.GetItems has not yet been implemented")
	})
	api.XアイテムGetItemsItemHandler = アイテム.GetItemsItemHandlerFunc(func(params アイテム.GetItemsItemParams) middleware.Responder {
		return middleware.NotImplemented("operation アイテム.GetItemsItem has not yet been implemented")
	})
	api.XメニューレシピGetMenuRecipesOptionsHandler = メニューレシピ.GetMenuRecipesOptionsHandlerFunc(func(params メニューレシピ.GetMenuRecipesOptionsParams) middleware.Responder {
		return middleware.NotImplemented("operation メニューレシピ.GetMenuRecipesOptions has not yet been implemented")
	})
	api.XレシピGetRecipesHandler = レシピ.GetRecipesHandlerFunc(func(params レシピ.GetRecipesParams) middleware.Responder {
		return middleware.NotImplemented("operation レシピ.GetRecipes has not yet been implemented")
	})
	api.XレシピGetRecipesRecipeHandler = レシピ.GetRecipesRecipeHandlerFunc(func(params レシピ.GetRecipesRecipeParams) middleware.Responder {
		return middleware.NotImplemented("operation レシピ.GetRecipesRecipe has not yet been implemented")
	})
	api.XレシピGetSkillsHandler = レシピ.GetSkillsHandlerFunc(func(params レシピ.GetSkillsParams) middleware.Responder {
		return middleware.NotImplemented("operation レシピ.GetSkills has not yet been implemented")
	})
	api.XレシピGetSkillsSkillRecipesHandler = レシピ.GetSkillsSkillRecipesHandlerFunc(func(params レシピ.GetSkillsSkillRecipesParams) middleware.Responder {
		return middleware.NotImplemented("operation レシピ.GetSkillsSkillRecipes has not yet been implemented")
	})
	api.Xその他GetVersionHandler = その他.GetVersionHandlerFunc(moecoop.Version)
	api.XアイテムPostItemsItemHandler = アイテム.PostItemsItemHandlerFunc(func(params アイテム.PostItemsItemParams) middleware.Responder {
		return middleware.NotImplemented("operation アイテム.PostItemsItem has not yet been implemented")
	})
	api.XメニューレシピPostMenuRecipesHandler = メニューレシピ.PostMenuRecipesHandlerFunc(func(params メニューレシピ.PostMenuRecipesParams) middleware.Responder {
		return middleware.NotImplemented("operation メニューレシピ.PostMenuRecipes has not yet been implemented")
	})
	api.XメニューレシピPostMenuRecipesPreparationHandler = メニューレシピ.PostMenuRecipesPreparationHandlerFunc(func(params メニューレシピ.PostMenuRecipesPreparationParams) middleware.Responder {
		return middleware.NotImplemented("operation メニューレシピ.PostMenuRecipesPreparation has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
